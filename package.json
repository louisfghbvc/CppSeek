{
  "name": "cppseek-semantic-search",
  "displayName": "CppSeek - Semantic Search",
  "description": "AI-powered semantic search for C/C++ codebases",
  "version": "0.0.2",
  "publisher": "louisfghbvc",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/louisfghbvc/CppSeek"
  },
  "engines": {
    "vscode": "^1.90.0"
  },
  "categories": [
    "Other",
    "Programming Languages"
  ],
  "activationEvents": [
    "onLanguage:cpp",
    "onLanguage:c",
    "onCommand:cppseek.semanticSearch"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cppseek.semanticSearch",
        "title": "CppSeek: Semantic Search",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.indexWorkspace",
        "title": "CppSeek: Index Workspace",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.clearIndex",
        "title": "CppSeek: Clear Index",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.showSettings",
        "title": "CppSeek: Show Settings",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.searchStats",
        "title": "CppSeek: Search Statistics",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.showSearchHistory",
        "title": "CppSeek: Show Search History",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.exportSearchHistory",
        "title": "CppSeek: Export Search History",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.clearSearchCache",
        "title": "CppSeek: Clear Search Cache",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.configurationWizard",
        "title": "CppSeek: Configuration Wizard",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.testConfiguration",
        "title": "CppSeek: Test Configuration",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.showDiagnostic",
        "title": "CppSeek: Show Diagnostic",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.navigateToNextResult",
        "title": "CppSeek: Navigate to Next Result",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.navigateToPreviousResult",
        "title": "CppSeek: Navigate to Previous Result",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.showNavigationHistory",
        "title": "CppSeek: Show Navigation History",
        "category": "CppSeek"
      },
      {
        "command": "cppseek.jumpToLine",
        "title": "CppSeek: Jump to Line",
        "category": "CppSeek"
      }
    ],
    "keybindings": [
      {
        "command": "cppseek.semanticSearch",
        "key": "ctrl+shift+s",
        "mac": "cmd+shift+s",
        "when": "editorTextFocus && (editorLangId == cpp || editorLangId == c)"
      },
      {
        "command": "cppseek.navigateToNextResult",
        "key": "ctrl+shift+n",
        "mac": "cmd+shift+n"
      },
      {
        "command": "cppseek.navigateToPreviousResult",
        "key": "ctrl+shift+p",
        "mac": "cmd+shift+p"
      },
      {
        "command": "cppseek.showNavigationHistory",
        "key": "ctrl+shift+h",
        "mac": "cmd+shift+h"
      },
      {
        "command": "cppseek.showSearchHistory",
        "key": "ctrl+alt+h",
        "mac": "cmd+alt+h"
      },
      {
        "command": "cppseek.jumpToLine",
        "key": "ctrl+g",
        "mac": "cmd+g"
      }
    ],
    "configuration": {
      "title": "CppSeek",
      "properties": {
        "cppseek.searchBehavior.maxResults": {
          "type": "number",
          "default": 50,
          "description": "Maximum number of search results to display",
          "minimum": 10,
          "maximum": 200
        },
        "cppseek.searchBehavior.chunkSize": {
          "type": "number",
          "default": 500,
          "description": "Size of text chunks for indexing (in tokens)",
          "minimum": 100,
          "maximum": 1000
        },
        "cppseek.searchBehavior.chunkOverlap": {
          "type": "number",
          "default": 50,
          "description": "Overlap between adjacent chunks (in tokens)",
          "minimum": 0,
          "maximum": 200
        },
        "cppseek.chunking.smartBoundaries": {
          "type": "boolean",
          "default": true,
          "description": "Enable smart boundary detection to avoid splitting mid-function"
        },
        "cppseek.chunking.preserveFormatting": {
          "type": "boolean",
          "default": true,
          "description": "Maintain whitespace and indentation in chunks"
        },
        "cppseek.files.include": {
          "type": "array",
          "default": [
            "**/*.cpp",
            "**/*.cxx",
            "**/*.cc",
            "**/*.c",
            "**/*.h",
            "**/*.hpp",
            "**/*.hxx"
          ],
          "description": "File patterns to include in indexing",
          "items": {
            "type": "string"
          }
        },
        "cppseek.files.exclude": {
          "type": "array",
          "default": [
            "**/node_modules/**",
            "**/build/**",
            "**/out/**",
            "**/dist/**"
          ],
          "description": "File patterns to exclude from indexing",
          "items": {
            "type": "string"
          }
        },
        "cppseek.performance.enableCache": {
          "type": "boolean",
          "default": true,
          "description": "Enable caching for better performance"
        },
        "cppseek.modernVectorStorage.nimApiKey": {
          "type": "string",
          "default": "",
          "description": "NVIDIA NIM API Key for embeddings (leave empty to use NIM_API_KEY environment variable)"
        },
        "cppseek.modernVectorStorage.nimBaseUrl": {
          "type": "string",
          "default": "https://integrate.api.nvidia.com/v1",
          "description": "NVIDIA NIM API base URL"
        },
        "cppseek.modernVectorStorage.nimModel": {
          "type": "string",
          "default": "nvidia/llama-3.2-nv-embedqa-1b-v2",
          "description": "NVIDIA NIM embedding model to use"
        },
        "cppseek.performance.maxMemoryUsage": {
          "type": "number",
          "default": 200,
          "description": "Maximum memory usage for indexing (in MB)",
          "minimum": 50,
          "maximum": 1000
        },
        "cppseek.fileReading.maxFileSize": {
          "type": "number",
          "default": 50,
          "description": "Maximum file size to process (in MB)",
          "minimum": 1,
          "maximum": 500
        },
        "cppseek.fileReading.encoding": {
          "type": "string",
          "default": "auto",
          "description": "Preferred text encoding (auto, utf8, latin1)",
          "enum": [
            "auto",
            "utf8",
            "latin1"
          ]
        },
        "cppseek.fileReading.preprocessWhitespace": {
          "type": "boolean",
          "default": true,
          "description": "Enable whitespace normalization during preprocessing"
        },
        "cppseek.fileReading.preserveComments": {
          "type": "string",
          "default": "preserve",
          "description": "How to handle comments in code files",
          "enum": [
            "preserve",
            "remove",
            "normalize"
          ]
        },
        "cppseek.fileReading.skipBinaryFiles": {
          "type": "boolean",
          "default": true,
          "description": "Skip files detected as binary content"
        },
        "cppseek.overlap.minSize": {
          "type": "number",
          "default": 25,
          "description": "Minimum overlap size in tokens",
          "minimum": 10,
          "maximum": 200
        },
        "cppseek.overlap.maxSize": {
          "type": "number",
          "default": 100,
          "description": "Maximum overlap size in tokens",
          "minimum": 50,
          "maximum": 500
        },
        "cppseek.overlap.adaptiveMode": {
          "type": "boolean",
          "default": true,
          "description": "Enable adaptive overlap sizing based on code structure"
        },
        "cppseek.overlap.preserveFunctions": {
          "type": "boolean",
          "default": true,
          "description": "Always preserve function signatures in overlaps"
        },
        "cppseek.overlap.preserveComments": {
          "type": "boolean",
          "default": true,
          "description": "Include relevant comments in overlap regions"
        },
        "cppseek.nim.apiKey": {
          "type": "string",
          "default": "",
          "description": "Nvidia NIM API key for embedding generation"
        },
        "cppseek.nim.baseUrl": {
          "type": "string",
          "default": "https://integrate.api.nvidia.com/v1",
          "description": "NIM API base URL"
        },
        "cppseek.nim.model": {
          "type": "string",
          "default": "nvidia/llama-3.2-nv-embedqa-1b-v2",
          "description": "NIM embedding model name"
        },
        "cppseek.nim.timeout": {
          "type": "number",
          "default": 30000,
          "description": "API request timeout in milliseconds",
          "minimum": 1000
        },
        "cppseek.nim.retryAttempts": {
          "type": "number",
          "default": 3,
          "description": "Number of retry attempts for failed requests",
          "minimum": 0,
          "maximum": 10
        },
        "cppseek.nim.maxConcurrentRequests": {
          "type": "number",
          "default": 10,
          "description": "Maximum concurrent API requests",
          "minimum": 1,
          "maximum": 50
        },
        "cppseek.nim.batchSize": {
          "type": "number",
          "default": 50,
          "description": "Batch size for processing multiple embeddings",
          "minimum": 1,
          "maximum": 100
        },
        "cppseek.vectorStorage.indexType": {
          "type": "string",
          "default": "auto",
          "description": "FAISS index type for vector storage",
          "enum": [
            "auto",
            "Flat",
            "IVFFlat",
            "HNSW"
          ]
        },
        "cppseek.vectorStorage.dimension": {
          "type": "number",
          "default": 2048,
          "description": "Vector dimension for embeddings",
          "minimum": 64,
          "maximum": 4096
        },
        "cppseek.vectorStorage.batchSize": {
          "type": "number",
          "default": 50,
          "description": "Batch size for vector operations",
          "minimum": 1,
          "maximum": 1000
        },
        "cppseek.vectorStorage.autoSave": {
          "type": "boolean",
          "default": true,
          "description": "Automatically save vector index to disk"
        },
        "cppseek.vectorStorage.autoSaveInterval": {
          "type": "number",
          "default": 300000,
          "description": "Auto-save interval in milliseconds (5 minutes default)",
          "minimum": 30000
        },
        "cppseek.vectorStorage.memoryLimit": {
          "type": "number",
          "default": 500,
          "description": "Memory limit for vector storage in MB",
          "minimum": 50,
          "maximum": 2048
        },
        "cppseek.vectorStorage.metric": {
          "type": "string",
          "default": "COSINE",
          "description": "Distance metric for vector similarity",
          "enum": [
            "COSINE",
            "L2",
            "IP"
          ]
        },
        "cppseek.vectorStorage.nlist": {
          "type": "number",
          "default": 100,
          "description": "Number of clusters for IVFFlat index",
          "minimum": 1,
          "maximum": 1000
        },
        "cppseek.vectorStorage.nprobe": {
          "type": "number",
          "default": 10,
          "description": "Number of clusters to search in IVFFlat",
          "minimum": 1,
          "maximum": 100
        },
        "cppseek.vectorStorage.efConstruction": {
          "type": "number",
          "default": 200,
          "description": "HNSW construction parameter",
          "minimum": 16,
          "maximum": 1000
        },
        "cppseek.vectorStorage.efSearch": {
          "type": "number",
          "default": 50,
          "description": "HNSW search parameter",
          "minimum": 1,
          "maximum": 1000
        },
        "cppseek.vectorStorage.minScore": {
          "type": "number",
          "default": 0.1,
          "description": "Minimum similarity score for search results",
          "minimum": 0,
          "maximum": 1
        },
        "cppseek.vectorStorage.enableFilters": {
          "type": "boolean",
          "default": true,
          "description": "Enable metadata filtering in search results"
        },
        "cppseek.vectorStorage.searchTimeout": {
          "type": "number",
          "default": 30000,
          "description": "Search operation timeout in milliseconds",
          "minimum": 1000
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "compile-ts": "tsc",
    "watch": "webpack --watch",
    "watch-ts": "tsc --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "build": "npm run package",
    "build:dev": "webpack --mode development --devtool source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:vscode": "vscode-test",
    "coverage": "jest --coverage",
    "lint": "eslint src",
    "format": "prettier --write src/**/*.ts",
    "format-check": "prettier --check src/**/*.ts"
  },
  "devDependencies": {
    "@types/jest": "^30.0.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/sqlite3": "^3.1.11",
    "@types/vscode": "^1.90.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.25.1",
    "jest": "^29.7.0",
    "mocha": "^11.7.1",
    "prettier": "^3.6.2",
    "ts-jest": "^29.4.0",
    "ts-loader": "^9.5.2",
    "typescript": "^5.8.3",
    "webpack": "^5.99.7",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@langchain/community": "^0.3.49",
    "@langchain/core": "^0.3.66",
    "@xenova/transformers": "^2.17.2",
    "chardet": "^2.1.0",
    "chromadb": "^3.0.10",
    "dotenv": "^17.2.0",
    "iconv-lite": "^0.6.3",
    "langchain": "^0.3.30",
    "ml-distance": "^4.0.1",
    "openai": "^5.10.2",
    "sqlite3": "^5.1.7"
  }
}
